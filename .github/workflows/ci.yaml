name: CI
on: [push]
jobs:

  install-dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
# Assign a cache key
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
# Get or Put cache @ check key path
      - name: Cache dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
# Install if no cache hit @ cache key
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --prefer-offline --frozen-lockfile --no-progress --non-interactive
# Zip the cache
      - name: ZIP dependencies
        run: |
          zip -r -q node_modules.zip ${{ steps.yarn-cache.outputs.dir }}
          echo ${{ steps.yarn-cache.outputs.dir }}
# Upload the cache zip
      - uses: actions/upload-artifact@v2
        with:
          name: node-modules-artifact
          path: ./node_modules.zip

  format-lint-build:
    needs: install-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
# Assign a cache key
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
# Get or Put cache @ check key path
      - name: Cache dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
# Download if no cache hit @ cache key
      - name: Download dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: node-modules-artifact
# UnZip the cache if no cache hit @ cache key
      - name: UNZIP dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          echo $(yarn cache dir)
          mkdir tmp
          unzip -o -q ./node_modules.zip -d ./tmp
          mv ./tmp/* $(yarn cache dir)
# Install if no cache hit @ cache key
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --prefer-offline --frozen-lockfile --no-progress --non-interactive
      - name: Format
        run: yarn format
      - name: Lint
        run: yarn lint
      - name: Build
        run: yarn build
      - name: ZIP build
        run: zip -r -q build.zip build
      - uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: ./build.zip

  # unit-test:
  #   needs: install-dependencies
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 14
  #     - name: Download dependencies
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: node-modules-artifact
  #     - name: UNZIP dependencies
  #       run: unzip -q ./node_modules.zip
  #     - name: Install
  #       run: yarn --prefer-offline --frozen-lockfile --no-progress --non-interactive
  #     - name: Test
  #       run: yarn test

  # integration-test:
  #   needs: [ install-dependencies, format-lint-build ]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 14
  #     - name: Download dependencies
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: node-modules-artifact
  #     - name: UNZIP dependencies
  #       run: unzip -o -q ./node_modules.zip
  #     - name: Install
  #       run: yarn --prefer-offline --frozen-lockfile --no-progress --non-interactive
  #     - name: Download build
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: build-artifact
  #     - name: UNZIP build
  #       run: unzip -q -o ./build.zip
  #     - name: Validate
  #       uses: ./
  #       with:
  #         db-connection-env-var: MONGO_CONNECTION_STRING
  #         run-command: yarn ci:validate
  #         binary-version: 4.4.6
  #         instance-dbName: validation
  #         instance-port: 27018
  #         instance-storageEngine: wiredTiger
  #         mongoms-debug: 1

  # package-tag:
  #   needs: [ unit-test, integration-test ]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 14
  #     - name: Download dependencies
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: node-modules-artifact
  #     - name: UNZIP dependencies
  #       run: unzip -o -q ./node_modules.zip
  #     - name: Install
  #       run: yarn --prefer-offline --frozen-lockfile --no-progress --non-interactive
  #     - name: Download build
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: build-artifact
  #     - name: UNZIP build
  #       run: unzip -q -o ./build.zip
  #     - name: Package
  #       run: yarn package
  #     - name: Tag
  #       if: github.ref == 'refs/heads/master'
  #       uses: endbug/add-and-commit@v7
  #       with:
  #         add: build
  #         author_email: jeffrey.dugas@neofinancial.com
  #         author_name: Neo Financial Engineering
  #         push: true
  #         signoff: true
  #         tag: 'v1.0.0 --force'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
